Nouveau format
Doit supporter :
	- les ressources externes (liens vers d'autres fichiers au même format en fait)
	- les resources peuvent être externes et locales
	- le contenu (noeuds et arcs) peut être divisé entre plusieurs fichiers
	- les annotations

La description et les contraintes ne sont pas incluses dans la déclaration des types ; elles sont supposées être présente dans le dictionnaire de types utilisé.

comma = "," ;
dot   = "." ;
sep   = "|" ;
semi  = ";" ;
bool  = "0" | "1" ;
line_break = "\n" | "\r\n" ;

File                        = Header , Type_declaration+ , (File_declaration | Node_declaration | Edge_declaration | Annotation_declaration)* ;

-----
Spéc 2.3
File                        = Header , (Type_declaration | line_break)+ , (File_declaration | Node_declaration | Edge_declaration | Annotation_declaration | line_break)* ;
-----

Header                      = header_declaration_prefix , sep , format_version , comma , nb_types , comma , nb_nodes ;
header_declaration_prefix   = "H" ;
format_version              = number , dot , number ;           % vaut forcément 2.0 pour cette version de la spécification
nb_types                    = number ;
nb_nodes                    = number ;

-----
Spéc 2.1
Header                      = header_declaration_prefix , sep , format_version ;
header_declaration_prefix   = "H" ;
format_version              = "2.1" ;
-----

Type_declaration            = type_declaration_prefix , sep , type_kind , sep , type_internal_id , sep , type_public_id , sep , type_canonical_name ;
type_declaration_prefix     = "T" ;
type_kind                   = "v" | "e" ;                       % 'v' comme vertex, 'e' comme edge
type_internal_id            = number ;                          % identifiant numérique interne à ce fichier
type_public_id              = guid ;                            % identifiant numérique (GUID) unique associé au type quelque soit le projet
type_canonical_name         = string ;

-----
Spéc 2.2
Type_declaration            = type_declaration_prefix , sep , type_kind , sep , type_internal_id , sep , type_public_id , sep , type_canonical_name, sep, type_description ;
type_description            = string ;
-----

File_declaration            = file_declaration_prefix , sep , file_location , sep , file_name ;
file_declaration_prefix     = "F" ;
file_location               = "l" | "r" ;                       % local or remote
file_name                   = string ;                          % chemin de fichier pour un fichier local, URL dans le cas d'un fichier distant

Node_declaration            = node_declaration_prefix , sep , node_type , sep , node_internal_id , sep , node_public_id , sep , node_canonical_name , sep , node_content ;
node_declaration_prefix     = "N" ;
node_type                   = number ;                          % correspond à un type_internal_id déclaré dans le fichier
node_internal_id            = number ;                          % identifiant numérique interne au fichier
node_public_id              = guid ;
node_canonical_name         = string ;
node_content                = string ;                          % contenu du noeud sous forme de chaîne de caractères

-----
Spéc 2.3
Node_declaration            = node_declaration_prefix , sep , node_type , sep , node_internal_id , sep , node_public_id , sep , node_lang , sep , node_canonical_name , sep , node_content ;
node_lang                   = language_code , [ "." , dialect_code ] ;
language_code               = ISO 639-3 language code ;
dialect_code                = string ;
-----

Edge_declaration            = edge_declaration_prefix , sep , edge_type , sep , edge_is_oriented , sep , edge_public_id , sep , edge_content ;
edge_declaration_prefix     = "E" ;
edge_type                   = number ;                          % correspond à un des id internes d'un types déclarés en en-tête
edge_is_oriented            = bool ;
edge_public_id              = guid
edge_content                = edge_ref , ( comma , edge_ref )+ ;
edge_ref                    = edge_internal_ref | edge_public_ref ;
edge_internal_ref           = "i" , "(" , number , ")" ;        % le nombre doit correspondre à un id interne d'un noeud déclaré dans le fichier
edge_public_ref             = "e" , "(" , guid , ")" ;          % identifiant numérique (GUID) d'un objet du graph

Annotation_declaration      = annotation_declaration_prefix , sep , object_public_id , sep , annotation_namespace , ":", annotation_key ,":",  annotation_value ;
annotation_declaration_prefix = "A" ;
object_public_id            = guid ;                            % id de l'objet du graph auquel est attachée l'annotation
annotation_namespace        = string ;                          % qui ne contient ni ':' ni '|'
annotation_key              = string ;                          % qui ne contient ni ':' ni '|'
annotation_value            = string ;                          % qui ne contient ni ':' ni '|'